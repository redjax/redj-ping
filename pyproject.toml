[project]
name = "redj-ping"
version = "0.1.0"
description = "Continuously ping a host/IP address"
authors = [
    {name = "Jack Kenyon", email = "jkenyon@embracepetinsurance.com"},
]
dependencies = [
    "stackprinter>=0.2.10",
    "dynaconf>=3.2.2",
    "loguru>=0.7.1",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.dev-dependencies]
dev = [
    "black>=23.9.1",
    "ruff>=0.0.288",
    "pytest>=7.4.2",
]

[tool.pdm.scripts]

###############
# Format/Lint #
###############

# Check only, don't fix
check = {cmd = "black ."}
# Check and fix
format = {cmd = "ruff check . --fix"}
## Run Black & Ruff
lint = { shell = "pdm run black . && pdm run ruff check . --fix" }

########################
# Start/Launch Scripts #
########################

#  Run main app or script. Launches from app/
start = { shell = "cd src && pdm run python redj_ping", env = { ENV_FOR_DYNACONF = "prod" } }
start-dev = { shell = "cd src && pdm run python redj_ping", env = { ENV_FOR_DYNACONF = "dev" } }

###########
# Alembic #
###########

## Create initial commit
alembic-init = { cmd = "alembic revision -m 'Initial commit.'" }

## Upgrade Alembic head after making model changes
alembic-upgrade = { cmd = "alembic upgrade head" }

## Run migrations
#  Prompts for a commit message
alembic-migrate = { shell = "read -p 'Commit message: ' commit_msg && pdm run alembic revision --autogenerate -m '${commit_msg}'" }

## Run full migration, upgrade - commit - revision
migrations = { shell = "pdm run alembic upgrade head && read -p 'Commit message: ' commit_msg && pdm run alembic revision --autogenerate -m '${commit_msg}'" }

######################
# Export Requirement #
######################

#  Export production requirements
export = { cmd = "pdm export --prod -o requirements.txt --without-hashes" }
#  Export only development requirements
export-dev = { cmd = "pdm export -d -o requirements.dev.txt --without-hashes" }
## Uncomment if/when using a CI group
# export-ci = {cmd = "pdm export -G ci -o requirements.ci.txt --without-hashes"}